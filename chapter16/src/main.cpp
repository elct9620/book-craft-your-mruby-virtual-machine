#include<mvm.h>
#include<stdio.h>

#include <stdint.h>
#if defined __GNUC__
__attribute__((aligned(4)))
#elif defined _MSC_VER
__declspec(align(4))
#endif

const uint8_t bin[] = {
  //count = 0
  // loop do
  //   break if count >= 5
  //   puts "Hello World"
  //   count += 1
  // end
  0x52,0x49,0x54,0x45,0x30,0x30,0x30,0x37,0x00,0x49,0x00,0x00,0x00,0xc9,0x4d,0x41,
  0x54,0x5a,0x30,0x30,0x30,0x30,0x49,0x52,0x45,0x50,0x00,0x00,0x00,0x8d,0x30,0x30,
  0x30,0x32,0x00,0x00,0x00,0x59,0x00,0x02,0x00,0x04,0x00,0x01,0x00,0x00,0x00,0x0e,
  0x06,0x01,0x10,0x02,0x55,0x03,0x00,0x2f,0x02,0x00,0x00,0x37,0x02,0x67,0x00,0x00,
  0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x04,0x6c,0x6f,0x6f,0x70,0x00,0x00,0x00,0x00,
  0xd7,0x00,0x02,0x00,0x05,0x00,0x00,0x00,0x00,0x00,0x2a,0x00,0x33,0x00,0x00,0x00,
  0x1f,0x02,0x01,0x00,0x0b,0x03,0x45,0x02,0x23,0x02,0x00,0x14,0x0f,0x02,0x39,0x02,
  0x10,0x02,0x4f,0x03,0x00,0x2e,0x02,0x00,0x01,0x1f,0x02,0x01,0x00,0x3c,0x02,0x01,
  0x20,0x02,0x01,0x00,0x37,0x02,0x00,0x00,0x00,0x01,0x00,0x00,0x0b,0x48,0x65,0x6c,
  0x6c,0x6f,0x20,0x57,0x6f,0x72,0x6c,0x64,0x00,0x00,0x00,0x01,0x00,0x04,0x70,0x75,
  0x74,0x73,0x00,0x4c,0x56,0x41,0x52,0x00,0x00,0x00,0x1e,0x00,0x00,0x00,0x02,0x00,
  0x05,0x63,0x6f,0x75,0x6e,0x74,0x00,0x01,0x26,0x00,0x00,0x00,0x01,0x00,0x01,0x00,
  0x01,0x45,0x4e,0x44,0x00,0x00,0x00,0x00,0x08,
};

mrb_value c_puts(mrb_state* mrb) {
  printf("argc: %d\n", mrb->ci->argc);
  printf("argv: %s\n", (char*)mrb->ci->argv->value.p);

  return mrb_nil_value();
}

mrb_value c_loop(mrb_state* mrb) {
  const uint8_t* irep = (const uint8_t*)mrb->ci->argv->value.p;

  mrb_value ret;
  while(mrb->exc == 0) {
    ret = mrb_exec(mrb, irep);
  }
  mrb->exc = 1;

  return ret;
}

static mrb_state* mrb;

#ifdef DEBUG
#ifndef UNIT_TEST
int main(int argc, char** argv) {
  mrb = mrb_open();
  mrb_define_method(mrb->object_class, "cputs", c_puts);
  mrb_define_method(mrb->object_class, "loop", c_loop);
  mrb_exec(mrb, bin + 34);
  mrb_close(mrb);
}
#endif
#else
#include <Arduino.h>

void setup() {
  Serial.begin(9600);

  mrb = mrb_open();
  mrb_define_method(mrb->object_class, "cputs");
}

void loop() {
  mrb_exec(mrb, bin + 34);
  delay(5000);
}
#endif
